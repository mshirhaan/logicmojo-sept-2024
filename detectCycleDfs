class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        Set<Integer> visited = new HashSet<>();
        for (int i = 0; i < V; i++) {
            if (!visited.contains(i)) {
                if (dfs(i, new HashSet<>(), adj, visited)) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean dfs(int node, Set<Integer> currentPath, ArrayList<ArrayList<Integer>> adj, Set<Integer> visited) {
        currentPath.add(node);
        visited.add(node);

        for (int neigh : adj.get(node)) {
            if (currentPath.contains(neigh)) {
                return true;
            }
            if (!visited.contains(neigh)) {
                if (dfs(neigh, currentPath, adj, visited)) {
                    return true;
                }
            }
        }
        currentPath.remove(node);
        return false;
    }
}
